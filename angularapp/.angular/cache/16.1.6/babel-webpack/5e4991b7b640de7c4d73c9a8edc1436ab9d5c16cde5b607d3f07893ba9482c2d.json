{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst exchangeRates = [{\n  id: 'USD',\n  value: 1.126735\n}, {\n  id: 'GBP',\n  value: 0.876893\n}, {\n  id: 'INR',\n  value: 79.677056\n}];\nclass CurrencyConverterPipe {\n  transform(amount, fromCurrency, toCurrency) {\n    const sourceRate = this.getExchangeRate(fromCurrency);\n    const targetRate = this.getExchangeRate(toCurrency);\n    if (sourceRate && targetRate) {\n      // Convert the amount from the source currency to the target currency\n      const convertedAmount = amount / sourceRate * targetRate;\n      return convertedAmount.toFixed(2);\n    }\n    return 'Invalid currency code';\n  }\n  getExchangeRate(currencyCode) {\n    const exchangeRate = exchangeRates.find(rate => rate.id === currencyCode);\n    return exchangeRate ? exchangeRate.value : null;\n  }\n}\nCurrencyConverterPipe.ɵfac = function CurrencyConverterPipe_Factory(t) {\n  return new (t || CurrencyConverterPipe)();\n};\nCurrencyConverterPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"currencyConverter\",\n  type: CurrencyConverterPipe,\n  pure: true\n});\nexport { CurrencyConverterPipe };","map":{"version":3,"names":["exchangeRates","id","value","CurrencyConverterPipe","transform","amount","fromCurrency","toCurrency","sourceRate","getExchangeRate","targetRate","convertedAmount","toFixed","currencyCode","exchangeRate","find","rate","pure"],"sources":["/home/coder/project/workspace/angularapp/src/app/currencyconv.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\ninterface ExchangeRate {\n  id: string;\n  value: number;\n}\n\nconst exchangeRates: ExchangeRate[] = [\n  { id: 'USD', value: 1.126735 },\n  { id: 'GBP', value: 0.876893 },\n  { id: 'INR', value: 79.677056 },\n];\n\n@Pipe({\n  name: 'currencyConverter'\n})\nexport class CurrencyConverterPipe implements PipeTransform {\n  transform(\n    amount: number,\n    fromCurrency: string,\n    toCurrency: string\n  ): number | string {\n    const sourceRate = this.getExchangeRate(fromCurrency);\n    const targetRate = this.getExchangeRate(toCurrency);\n\n    if (sourceRate && targetRate) {\n      // Convert the amount from the source currency to the target currency\n      const convertedAmount = (amount / sourceRate) * targetRate;\n      return convertedAmount.toFixed(2);\n    }\n\n    return 'Invalid currency code';\n  }\n\n  private getExchangeRate(currencyCode: string): number | null {\n    const exchangeRate = exchangeRates.find(rate => rate.id === currencyCode);\n    return exchangeRate ? exchangeRate.value : null;\n  }\n}"],"mappings":";AAOA,MAAMA,aAAa,GAAmB,CACpC;EAAEC,EAAE,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAQ,CAAE,EAC9B;EAAED,EAAE,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAQ,CAAE,EAC9B;EAAED,EAAE,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAS,CAAE,CAChC;AAED,MAGaC,qBAAqB;EAChCC,SAASA,CACPC,MAAc,EACdC,YAAoB,EACpBC,UAAkB;IAElB,MAAMC,UAAU,GAAG,IAAI,CAACC,eAAe,CAACH,YAAY,CAAC;IACrD,MAAMI,UAAU,GAAG,IAAI,CAACD,eAAe,CAACF,UAAU,CAAC;IAEnD,IAAIC,UAAU,IAAIE,UAAU,EAAE;MAC5B;MACA,MAAMC,eAAe,GAAIN,MAAM,GAAGG,UAAU,GAAIE,UAAU;MAC1D,OAAOC,eAAe,CAACC,OAAO,CAAC,CAAC,CAAC;;IAGnC,OAAO,uBAAuB;EAChC;EAEQH,eAAeA,CAACI,YAAoB;IAC1C,MAAMC,YAAY,GAAGd,aAAa,CAACe,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACf,EAAE,KAAKY,YAAY,CAAC;IACzE,OAAOC,YAAY,GAAGA,YAAY,CAACZ,KAAK,GAAG,IAAI;EACjD;;AArBWC,qBAAqB,C;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB,C;;QAArBA,qBAAqB;EAAAc,IAAA;AAAA;SAArBd,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}